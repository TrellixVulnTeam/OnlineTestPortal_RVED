{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/exam.service\";\nimport * as i2 from \"./../auth/auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\n\nfunction ExamComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelementStart(1, \"h4\");\n    i0.ɵɵtext(2, \"Congraulations! Your Exam has been Submitted Successfully ..\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ExamComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelementStart(1, \"h5\", 15);\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 16);\n    i0.ɵɵelementStart(6, \"select\", 17);\n    i0.ɵɵelementStart(7, \"option\", 18);\n    i0.ɵɵtext(8, \"True\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"option\", 19);\n    i0.ɵɵtext(10, \"False\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const question_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", question_r2.id, \".\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", question_r2.body, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", question_r2.id);\n    i0.ɵɵpropertyInterpolate(\"name\", question_r2.id);\n    i0.ɵɵpropertyInterpolate(\"id\", question_r2.id);\n  }\n}\n\nexport let ExamComponent = /*#__PURE__*/(() => {\n  class ExamComponent {\n    constructor(examService, authService) {\n      this.examService = examService;\n      this.authService = authService; // Declare Properties, Objects, & Arrays\n\n      this.form = new FormGroup({});\n      this.submitted = false;\n      this.exams = [];\n      this.questions = [];\n      this.results = [];\n      this.exam = {\n        id: null,\n        title: null,\n        grade: null,\n        questions: []\n      };\n      this.examTitle = '';\n      this.result = {\n        username: null,\n        examid: null,\n        grade: null\n      };\n      this.total = 0;\n      this.successFlag = false;\n    }\n\n    ngOnInit() {\n      // Declare FormGroup to Hold Dynamic Controls\n      let group = new FormGroup({}); // Call getExams Method to View Exam Information\n\n      this.examService.getExams().subscribe(list => {\n        this.exams = [];\n        this.exams = list.map(item => {\n          return Object.assign({\n            $key: item.key\n          }, item.payload.val());\n        }); // Find Exam by Id\n\n        this.exam = this.exams.find(e => e.id = 1);\n\n        if (this.exam) {\n          this.examTitle = this.exam.title;\n        }\n      }); // Call getQuestions Method to Fill Form with Exam Questions\n\n      this.examService.getQuestions().subscribe(list => {\n        this.questions = [];\n        this.questions = list.map(item => {\n          return Object.assign({\n            $key: item.key\n          }, item.payload.val());\n        }); // Find Questions by Exam Id\n\n        this.questions = this.questions.filter(q => q.examid = 1);\n\n        if (this.questions.length > 0) {\n          // Create FormControl based on Number of Questions in Exam\n          this.questions.forEach(question => {\n            group.addControl(question.id.toString(), new FormControl('', Validators.required));\n          });\n        }\n      });\n      this.form = group;\n    } // Method to Validate Form & Submit Answers\n\n\n    onSubmit() {\n      // Assign Values to Variables\n      this.submitted = true;\n      this.successFlag = false;\n      this.total = 0; // Validate Form Entries\n\n      if (this.form.invalid) {\n        return;\n      } // Grade Submitted Answers\n\n\n      this.questions.forEach(question => {\n        this.total += JSON.parse(this.form.controls[question.id].value) === question.answer ? question.grade : 0;\n      }); // Call getResults() Method to Find User Result\n\n      this.examService.getResults().subscribe(list => {\n        this.results = [];\n        this.results = list.map(item => {\n          return Object.assign({\n            $key: item.key\n          }, item.payload.val());\n        }); // Prepare & Insert User Result into result Object\n\n        this.result = this.results.find(r => r.username == this.authService.getUsername() && r.examid == 1);\n\n        if (this.result) {\n          this.result.grade = this.total; // Call updateExamGrade Method to Update Grade\n\n          this.examService.updateExamGrade(this.result); // Flag to Show Success Message\n\n          this.successFlag = true;\n        }\n      });\n    }\n\n  }\n\n  ExamComponent.ɵfac = function ExamComponent_Factory(t) {\n    return new (t || ExamComponent)(i0.ɵɵdirectiveInject(i1.ExamService), i0.ɵɵdirectiveInject(i2.AuthService));\n  };\n\n  ExamComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExamComponent,\n    selectors: [[\"app-exam\"]],\n    decls: 22,\n    vars: 5,\n    consts: [[1, \"row\"], [1, \"col-md-12\", \"offset-md-12\"], [\"class\", \"alert alert-success text-center\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"questions-form\", \"bg-light\", \"mt-4\", \"p-4\"], [1, \"text-center\", \"green\", \"fw-bold\"], [1, \"fw-bold\"], [1, \"m-3\"], [\"width\", \"20\", \"alt\", \"Warning Icon\", \"src\", \"assets/images/warning-icon.png\"], [1, \"text-danger\", \"ms-2\"], [3, \"formGroup\", \"ngSubmit\"], [\"class\", \"form-group row p-1\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-group\", \"col-12\", \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-success\", 3, \"disabled\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\", \"text-center\"], [1, \"form-group\", \"row\", \"p-1\"], [1, \"col-md-10\"], [1, \"col-md-2\"], [1, \"form-control\", 3, \"formControlName\", \"name\", \"id\"], [\"value\", \"true\"], [\"value\", \"false\"]],\n    template: function ExamComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtemplate(2, ExamComponent_div_2_Template, 3, 0, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 0);\n        i0.ɵɵelementStart(4, \"div\", 1);\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"h3\", 4);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"hr\");\n        i0.ɵɵelementStart(9, \"h4\", 5);\n        i0.ɵɵtext(10, \"List of Questions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"hr\");\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵelement(13, \"img\", 7);\n        i0.ɵɵelementStart(14, \"label\", 8);\n        i0.ɵɵtext(15, \" All Questions are Required to Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"form\", 9);\n        i0.ɵɵlistener(\"ngSubmit\", function ExamComponent_Template_form_ngSubmit_16_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtemplate(17, ExamComponent_div_17_Template, 11, 5, \"div\", 10);\n        i0.ɵɵelement(18, \"br\");\n        i0.ɵɵelementStart(19, \"div\", 11);\n        i0.ɵɵelementStart(20, \"button\", 12);\n        i0.ɵɵtext(21, \"Submit Answers\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.successFlag === true);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.examTitle);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.questions);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.form.valid || ctx.successFlag);\n      }\n    },\n    directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i3.NgForOf, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.FormControlName, i4.NgSelectOption, i4.ɵNgSelectMultipleOption],\n    styles: [\"\"]\n  });\n  return ExamComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}